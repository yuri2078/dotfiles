# mysql  数据库基础

## mysql 登陆

```bash
mysql -h hostname -u username -p
```

其中：

- `-h`：表示连接的主机名或 IP 地址；
- `-u`：表示登录的用户名；
- `-p`：表示登录密码，同时也会提示你输入密码

## SQL 语句分类

1. 
2. 
3. 
4. 数据控制语言 (DCL)：Data Control Language，用于授权访问数据库中的对象，如 `GRANT` 和 `REVOKE`。
5. 事务控制语言 (TCL)：Transaction Control Language，用于控制事务的处理，如 `COMMIT`, `ROLLBACK` 和 `SAVEPOINT`。

其中，DDL、DML 和 DQL 是 SQL 中最为常见的语句类型，它们构成了 SQL 查询和数据处理的主要逻辑。

### DDL 语句

> 数据定义语言 (DDL)：Data Definition Language，用于创建、更新或删除数据库中的表和其他对象，如 `CREATE`, `ALTER` 。

1. `CREATE`

   用于在数据库中创建新的表、视图、索引或存储过程。

   示例：创建一个名为 `students` 的表，包含 `id`、`name`、`age` 三列的数据。

   ```sql
   CREATE TABLE students (
       id INT NOT NULL,
       name VARCHAR(20) NOT NULL,
       age INT NOT NULL,
       PRIMARY KEY (id)
   );
   ```

2. `ALTER`

   用于修改数据库中的表、视图、索引或存储过程。

   示例：向 `students` 表中添加一列 `gender`。

   ```sql
   ALTER TABLE students ADD COLUMN gender VARCHAR(10);
   ```

3. `DROP`

   用于删除数据库中的表、视图、索引或存储过程。

   示例：删除 `students` 表。

   ```sql
   DROP TABLE students;
   ```

4. `TRUNCATE`

   用于删除表中的所有行，但不删除表本身。

   示例：删除 `students` 表中的所有数据。

   ```sql
   TRUNCATE TABLE students;
   ```

5. `COMMENT`

   用于给数据库中的对象（如表、列等）添加注释信息。

   示例：给 `students` 表中的 `id` 列添加注释。

   ```sql
   COMMENT ON COLUMN students.id IS '学生编号';
   ```

6. `RENAME`

   用于重命名数据库中的表、视图、索引或存储过程。

   示例：将 `students` 表重命名为 `new_students`。

   ```sql
   RENAME TABLE students TO new_students;
   ```

7. `GRANT`

   用于授权其他用户对数据库中的对象进行访问、修改、删除等操作权限。

   示例：将 `students` 表的 `INSERT` 权限授予给 `user1` 用户。

   ```sql
   GRANT INSERT ON students TO user1;
   ```

8. `REVOKE`

   用于收回其他用户对数据库中的对象的操作权限。

   示例：收回 `user1` 用户对 `students` 表的 `INSERT` 权限。

   ```sql
   REVOKE INSERT ON students FROM user1;
   ```

### DML 语句

> 数据操纵语言 (DML)：Data Manipulation Language，用于操纵表中的数据，如 `SELECT`, `INSERT`, `UPDATE` 和 `DELETE`。

1. `SELECT`

   用于从数据库中查询数据。

   示例：查询 `students` 表中所有学生的信息。

   ```sql
   SELECT * FROM students;
   ```

2. `INSERT`

   用于向数据库中插入新的数据。

   示例：向 `students` 表中插入一条新的学生信息。

   ```sql
   INSERT INTO students (id, name, age) VALUES (1, '张三', 20);
   ```

3. `UPDATE`

   用于修改数据库中已有的数据。

   示例：将 `students` 表中学号为 1 的学生姓名修改为 '李四'。

   ```sql
   UPDATE students SET name = '李四' WHERE id = 1;
   ```

4. `DELETE`

   用于删除数据库中已有的数据。

   示例：删除 `students` 表中学号为 1 的学生信息。

   ```sql
   DELETE FROM students WHERE id = 1;
   ```

5. `MERGE`

   可以根据指定条件判断是否进行插入或更新操作。

   示例：向 `students` 表中插入一条新的学生信息，如果该学生已存在，则更新其信息。

   ```sql
   MERGE INTO students s
   USING (SELECT 1 id, '张三' name, 20 age FROM dual) t
   ON (s.id = t.id)
   WHEN MATCHED THEN
     UPDATE SET s.name = t.name, s.age = t.age
   WHEN NOT MATCHED THEN
     INSERT (id, name, age) VALUES (t.id, t.name, t.age);
   ```

### DQL 语句

> 数据查询语言 (DQL)：Data Query Language，用于查询表中的数据，如 `SELECT` 和 `FROM`。

1. `SELECT`

   用于从数据库中查询数据。

   示例：查询 `students` 表中所有学生的信息。

   ```sql
   SELECT * FROM students;
   ```

2. `INSERT INTO`

   用于向数据库中插入新的数据。

   示例：向 `students` 表中插入一条新的学生信息。

   ```sql
   INSERT INTO students (id, name, age) VALUES (1, '张三', 20);
   ```

3. `UPDATE`

   用于修改数据库中已有的数据。

   示例：将 `students` 表中学号为 1 的学生姓名修改为 '李四'。

   ```sql
   UPDATE students SET name = '李四' WHERE id = 1;
   ```

4. `DELETE`

   用于删除数据库中已有的数据。

   示例：删除 `students` 表中学号为 1 的学生信息。

   ```sql
   DELETE FROM students WHERE id = 1;
   ```

5. `CREATE TABLE`

   用于创建新的数据库表格。

   示例：在数据库中创建一个名为 `courses` 的表格。

   ```sql
   CREATE TABLE courses (
       id INT PRIMARY KEY,
       name VARCHAR(20),
       teacher VARCHAR(20),
       credit FLOAT
   );
   ```

6. `ALTER TABLE`

   用于修改数据库表格结构。

   示例：向 `courses` 表中添加一列 `category`。

   ```sql
   ALTER TABLE courses ADD category VARCHAR(20);
   ```

7. `DROP TABLE`

   用于删除已有的数据库表格。

   示例：删除 `courses` 表格。

   ```sql
   DROP TABLE courses;
   ```

## 常用语句

### SHOW

1. `SHOW DATABASES`

   用于显示 MySQL 数据库中所有可用的数据库。

   格式：`SHOW DATABASES;`

   示例：

   ```
   SHOW DATABASES;
   ```

   输出：

   ```
   +--------------------+
   | Database           |
   +--------------------+
   | information_schema |
   | mysql              |
   | performance_schema |
   | sys                |
   | test_db            |
   +--------------------+
   ```

2. `SHOW TABLES`

   用于显示数据库中所有可用的表格。

   格式：`SHOW TABLES;`

   示例：

   ```
   SHOW TABLES;
   ```

   输出：

   ```
   +----------------------+
   | Tables_in_test_db     |
   +----------------------+
   | customers            |
   | orders               |
   | products             |
   +----------------------+
   ```

3. `SHOW COLUMNS`

   用于显示表格中的列信息。

   格式：`SHOW COLUMNS FROM table_name;`

   示例：

   ```
   SHOW COLUMNS FROM customers;
   ```

   输出：

   ```
   +---------+-------------+------+-----+---------+----------------+
   | Field   | Type        | Null | Key | Default | Extra          |
   +---------+-------------+------+-----+---------+----------------+
   | id      | int         | NO   | PRI | NULL    | auto_increment |
   | name    | varchar(50) | YES  |     | NULL    |                |
   | email   | varchar(50) | YES  |     | NULL    |                |
   | country | varchar(50) | YES  |     | NULL    |                |
   +---------+-------------+------+-----+---------+----------------+
   ```

4. `SHOW INDEX`

   用于显示表格中的索引信息。

   格式：`SHOW INDEX FROM table_name;`

   示例：

   ```
   SHOW INDEX FROM customers;
   ```

   输出：

   ```
   +-----------+------------+-----------+--------------+-------------+-----------+-------------+----------
   | Table     | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part 
   +-----------+------------+-----------+--------------+-------------+-----------+-------------+----------
   | customers |          0 | PRIMARY   |            1 | id          | A         |           3 |     NULL 
   | customers |          1 | email_idx |            1 | email       | A         |           3 |     NULL 
   +-----------+------------+-----------+--------------+-------------+-----------+-------------+----------
   ```

   注意：`SHOW INDEX` 关键字仅在 MySQL/MariaDB 数据库系统中可用。在 Oracle 和 SQL Server 等其他数据库管理系统中，请查看相应的文档来了解它们使用的特定指令

### ALTER 

> `ALTER` 指令用于修改已存在的数据库表结构。

以下是 `ALTER` 指令的格式及详细信息：

1. `ALTER TABLE ADD COLUMN`

   用于向表中添加新的列。

   格式：`ALTER TABLE table_name ADD COLUMN column_name data_type;`

   示例：

   ```
   ALTER TABLE customers ADD COLUMN phone VARCHAR(20);
   ```

   注意: `ADD COLUMN` 子句是风格最为统一和约定俗成的。但是因为支持数据库管理系统的差异，实际使用时应该先查看相应的文档来学习具体语法。

2. `ALTER TABLE MODIFY COLUMN`

   用于修改表中已有的列的数据类型和约束。

   格式：`ALTER TABLE table_name MODIFY COLUMN column_name new_data_type;`

   示例：

   ```
   ALTER TABLE customers MODIFY COLUMN email VARCHAR(50) NOT NULL;
   ```

   注意：`MODIFY COLUMN` 用于修改数据类型，还有其他选项，如 `DEFAULT` 和 `NOT NULL` 等。

3. `ALTER TABLE DROP COLUMN`

   用于删除表中的列。

   格式：`ALTER TABLE table_name DROP COLUMN column_name;`

   示例：

   ```
   ALTER TABLE customers DROP COLUMN phone;
   ```

4. `ALTER TABLE RENAME TO`

   用于修改数据库表的名称。

   格式：`ALTER TABLE old_table_name RENAME TO new_table_name;`

   示例：

   ```
   ALTER TABLE customers RENAME TO clients;
   ```

5. `ALTER TABLE ADD CONSTRAINT`

   用于添加表中新的约束。

   格式：`ALTER TABLE table_name ADD CONSTRAINT constraint_name constraints_definition;`

   示例：

   ```
   ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers (id);
   ```

   注意：`ADD CONSTRAINT` 用于添加任何类型的约束。它可以增加唯一性约束、外键约束、主键约束或检查约束等

### DROP 

> `DROP` 指令用于删除数据库中的对象，比如表、索引、数据列等。

以下是 `DROP` 指令的格式及详细信息：

1. `DROP TABLE`

   用于删除数据库中的一个表。

   格式：`DROP TABLE table_name;`

   示例：

   ```
   DROP TABLE customers;
   ```

2. `DROP INDEX`

   用于删除数据库中的一个索引。

   格式：`DROP INDEX index_name ON table_name;`

   示例：

   ```
   DROP INDEX email_idx ON customers;
   ```

3. `DROP COLUMN`

   用于删除表中的一个列。

   格式：`ALTER TABLE table_name DROP COLUMN column_name;`

   示例：

   ```
   ALTER TABLE customers DROP COLUMN phone;
   ```

4. `DROP CONSTRAINT`

   用于删除表中的一个约束。

   格式：`ALTER TABLE table_name DROP CONSTRAINT constraint_name;`

   示例：

   ```
   ALTER TABLE orders DROP CONSTRAINT fk_customer;
   ```

5. `DROP VIEW`

   用于删除一个视图。

   格式：`DROP VIEW view_name;`

   示例：

   ```
   DROP VIEW customer_view;
   ```

6. `DROP FUNCTION`

   用于删除一个函数。

   格式：`DROP FUNCTION function_name;`

   示例：

   ```
   DROP FUNCTION calculate_discount;
   ```

7. `DROP PROCEDURE`

   用于删除一个存储过程。

   格式：`DROP PROCEDURE procedure_name;`

   示例：

   ```
   DROP PROCEDURE get_customer_orders;
   ```